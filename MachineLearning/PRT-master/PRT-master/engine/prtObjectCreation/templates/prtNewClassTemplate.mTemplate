classdef <fileName> < prtClass
    %<fileName> Insert description of class here
    %
    
    properties (SetAccess=private)
        name = '<className>'                  % Insert the name of the classifier
        nameAbbreviation = '<className>'      % A short abbreviation of the name
		isNativeMary = false;          	      % Change to true to create an M-ary classifier
    end
    
    properties  
       % Place definitions of properties that your classifier requires here
    end
    
    methods
        
        %Define a constructor
        function Obj = <fileName>(varargin)
            %Uncomment this line to enable parameter/value setting of public
            %properties for your classifier
            % Obj = prtUtilAssignStringValuePairs(Obj,varargin{:});
        end
        
        % Put additional methods here (set, get methods, and any other
        % methods your classifier requires)
    end
    
    methods (Access=protected, Hidden = true)
        
        function Obj = trainAction(Obj,DataSet)
            % Place code here to perform classifier training.  This
            % function should set the properties of Obj so that in
            % runAction the classifier can output decision statistics
            
        end
        
        function DataSetOut = runAction(Obj,DataSetIn)
            % Place code here to perform classifier running.  This
            % function should set output either:
            %
            %   1) A DataSet with observations of size
            %   DataSetIn.nObservations x 1 (for classifiers with
            %   isNativeMary set to "false").  Higher values should
            %   correspond to data points in DataSetIn which are more
            %   likely to correspond to the positive hypothesis.  Note that 
            %   for binary classification problems, the output of class.run 
            %   should always contain exactly one column.
            %
            %   Or:
            %
            %   2) A DataSet with observations of size
            %   DataSetIn.nObservations x nClasses, where each column of
            %   the output DataSet represents the likelihood that each
            %   observation belongs to the corresponding element of
            %   nClasses
            %
            %   If yOut is a vector or matrix containing the output values,
            %   the DataSetOut can be created with the following line of
            %   code:
            %   DataSetOut = DataSetIn.setObservations(yOut);

            %By default, do nothing; remove this line to include your 
            %algorithm
            DataSetOut = DataSetIn; 
        end
        
    end
    
end